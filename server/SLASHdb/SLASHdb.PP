int stat(__const char *__path, struct stat *__statbuf);
int lstat(__const char *__path, struct stat *__statbuf);
int fstat(int __fd, struct stat *__statbuf);
int mknod(__const char *__path, __mode_t __mode, __dev_t __dev);
int main(int argc, char **argv);
static void exception_handler(char *message, void *data);
static int get_user_id(PGconn *conn);
static Logical delete_contour(ElementP root);
static Logical get_annotation_z_levels(ElementP root);
static Logical validate_name(ElementP root);
static Logical update_contour(ElementP root);
static Logical set_geometry_type(ElementP root);
static void delete_geometry(PGconn *conn, int geom_id);
static Logical delete_annotation(ElementP root);
static Logical add_annotation(ElementP root);
static Logical update_annotation(ElementP root);
static char *generate_app_data(void);
static char *sanitize(char *s);
static Logical get_annotation(ElementP root);
static char *encode(char *string);
static Logical add_contour(ElementP root);
static char *get_points(void);
static void add_contour_trap(char *message, void *data);
static Logical get_sequence(ElementP root);
static Logical get_dataset(ElementP root);
static Logical get_objects(ElementP root);
static Logical get_all_contours(ElementP root);
static Logical get_contours(ElementP root);
static Logical get_contour_data(ElementP root);
static void fail(char *message, void *data);
static int get_next_sequence(PGconn *conn);
void adx_store_data(const char *filepath, const char *data);
static void parse_points(size_t *n, double **x, double **y, char *string);
static void parse_hex(void *value, char *s, int l);
static void signal_handler(int sig);
static void smooth(size_t *n, double **x, double **y);
static void simplify_points(size_t *n, double **x, double **y);
static Logical get_surface(ElementP root);
static Logical make_surface(ElementP root, int color, int annotation_id, int tuples, PGresult *result);
static void build_indexed_triangle_list(ElementP surface, GeometryBuffer gb);
static int vindex_compare(const void *p1, const void *p2);
static void dump_triangles(ElementP surface, Triangle *tarray, int nt, HashTable *vtable);
static TextBufferP create_text_buffer(void);
static void triangle_handler(float t[3][3], void *data);
static void append(TextBufferP tb, char *fmt, ...);
